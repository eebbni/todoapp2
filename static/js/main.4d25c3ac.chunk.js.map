{"version":3,"sources":["logo.svg","components/InputBox.js","components/ToDoItem.js","components/ToDoItemList.js","components/Count.js","pages/Home.jsx","App.js","reportWebVitals.js","index.js"],"names":["Inputbox","styled","div","Inputbox_inp","input","Btn","button","InputBox","todoList","setTodoList","useState","text","setText","inputRef","useRef","useEffect","console","log","type","name","placeholder","ref","className","onChange","e","target","value","onClick","alert","nextTodoList","concat","id","length","done","deleted","current","focus","ItemBox","li","ItemName","span","chk","CheckBox","EditBtn","DelBtn","EditInput","ToDoItem","todoItem","checked","editInputRef","edited","setEdited","newText","setnewText","map","item","window","confirm","ListBox","ListTitle","p","List","ul","ToDoItemList","title","checkedList","Count","filter","Homepage","Home","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.4d25c3ac.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import React, {useState,useRef,useEffect} from 'react';\r\nimport Button from '@mui/material/Button';\r\nimport styled from 'styled-components';\r\n\r\nconst Inputbox = styled.div`\r\nwidth: 100%;\r\ndisplay: flex;\r\nalign-items: center;\r\n`;\r\nconst Inputbox_inp = styled.input`\r\nflex: 1; \r\nborder: none; \r\nborder-bottom: 1px solid #f1f3f5; \r\npadding: 10px; \r\nheight: 50px; \r\nbox-sizing: border-box;\r\n`;\r\nconst Btn = styled.button`\r\nborder: none; \r\nborder-radius: 0; \r\nbackground-color: #d0ebff; \r\ncolor: #1c7ed6; \r\nheight: 50px; \r\nwidth: 50px; \r\nfont-weight: bold;\r\n&:hover {\r\n    cursor: pointer;\r\n    background-color: #1f9dfa;\r\n  }\r\n`;\r\n\r\nexport const InputBox = ({todoList,setTodoList}) => {\r\n    const [text,setText] = useState('');\r\n    const inputRef = useRef(null);\r\n\r\n    //정상동작 확인(todoList에 대해서)\r\n    useEffect(() => {\r\n        console.log(todoList);\r\n    },[todoList])\r\n\r\n    const onChangeHandler = (e) => {\r\n        setText(e.target.value);\r\n    }\r\n\r\n    const onClickBtn = () => {\r\n        if(!text)\r\n        {\r\n            alert('값을 다시 입력해주세요');\r\n            return false;\r\n        }\r\n        const nextTodoList = todoList.concat({\r\n            id: todoList.length,\r\n            text : text,\r\n            done : false,\r\n            deleted : false\r\n        })\r\n        setTodoList(nextTodoList);\r\n\r\n        //input값 초기화\r\n        setText('');\r\n        inputRef.current.focus(); //클릭 후 포커싱\r\n    }\r\n\r\n    return (\r\n    <Inputbox>\r\n       <Inputbox_inp\r\n        type=\"text\"\r\n        name=\"todoInput\"\r\n        placeholder=\"할일을 입력하세요\"\r\n        ref={inputRef}\r\n        className=\"inputbox_input\"\r\n        onChange={onChangeHandler}\r\n        value={text}\r\n        />\r\n        <Btn onClick={onClickBtn} type=\"submit\">추가</Btn>\r\n    </Inputbox>\r\n    );\r\n}\r\n","import React, { useEffect , useState , useRef} from 'react';\r\nimport styled from 'styled-components';\r\n\r\nconst ItemBox = styled.li`\r\n    display: flex;\r\n    align-items: center;\r\n    margin-bottom: 10px;\r\n    height: 36px;\r\n`;\r\nconst ItemName = styled.span`\r\n    flex: 1;\r\n    ${({chk}) => {\r\n        return chk === true ? \r\n        'font-style: italic; text-decoration: line-through; color: #868e96;'\r\n        : null;\r\n    }}\r\n`;\r\nconst CheckBox = styled.input`\r\n    margin-right: 10px;\r\n`;\r\nconst EditBtn = styled.button`\r\n    border: none; \r\n\r\n    border-radius: 0; \r\n    height: 36px; \r\n    width: 36px; \r\n    margin-right: 3px;\r\n    background-color: inherit;\r\n    &:hover {\r\n        cursor: pointer;\r\n        background-color: #d0ebff;\r\n      }\r\n`;\r\nconst DelBtn = styled.button`\r\n    border: none; \r\n    border-radius: 0; \r\n    height: 36px; \r\n    width: 36px; \r\n    background-color: inherit;\r\n    &:hover {\r\n        cursor: pointer;\r\n        background-color: #d0ebff;\r\n      }\r\n`;\r\nconst EditInput = styled.input`\r\nflex: 1; \r\nborder: none; \r\nborder-bottom: 1px solid #f1f3f5; \r\npadding: 5px; \r\nfont-size: 1em; \r\nbox-sizing: border-box;\r\n`;\r\n\r\nconst ToDoItem = ({todoItem,todoList,setTodoList,checked}) => {\r\n    const editInputRef = useRef(null);\r\n\r\n    const [edited,setEdited] = useState(false);\r\n    const [newText,setnewText] = useState(todoItem.text);//처음에는 기존의 값임\r\n\r\n    const onClickDelete = () => {\r\n        if(window.confirm('지우겠습니까?'))\r\n        {\r\n            const nextTodoList = todoList.map((item)=>(\r\n                {\r\n                    ...item,\r\n                    deleted : item.id === todoItem.id ? true : item.deleted\r\n                }\r\n            ));\r\n            setTodoList(nextTodoList);\r\n        }\r\n    }\r\n    const onChangeChk = () => {\r\n        //리스트를 돌리면서 해당하는 id값인 경우 done을 반대로 처리함.\r\n        //아니라면 그냥 done 값 유지\r\n        const nextTodoList = todoList.map((item) => (\r\n            {\r\n                ...item,\r\n                done : item.id === todoItem.id ? !item.done : item.done\r\n            }\r\n        ));\r\n        //다시 투두 리스트 값 설정\r\n        setTodoList(nextTodoList);\r\n    };\r\n\r\n    //수정버튼으로 변경하기\r\n    const onClickEditButton = () => \r\n    {\r\n        setEdited(true);\r\n    }\r\n\r\n    //새로운 글자 세팅\r\n    const onChangeEdit = (e) => {\r\n        setnewText(e.target.value)\r\n    }\r\n\r\n    //서브밋시키기\r\n    function onClickSubmitButton (){\r\n        const nextTodoList = todoList.map((item)=>(\r\n            {\r\n                ...item,\r\n                text : item.id === todoItem.id ? newText : item.text\r\n            }\r\n        ));\r\n        setTodoList(nextTodoList); //새롭게 리스트 수정\r\n\r\n        setEdited(false); // 수정상태에서 다시 읽기로 변경\r\n    }\r\n\r\n    useEffect(()=> {\r\n        if (edited)\r\n        {\r\n            editInputRef.current.focus();\r\n        }\r\n    },[edited]);\r\n    \r\n    return (\r\n        <ItemBox>\r\n            <CheckBox onChange={onChangeChk} checked={todoItem.done} type=\"checkbox\" />\r\n            {\r\n                edited ? <EditInput\r\n                        type=\"text\"\r\n                        value={newText}\r\n                        ref={editInputRef}\r\n                        onChange={onChangeEdit}\r\n                        /> :\r\n                        <ItemName chk={checked}>{todoItem.text}</ItemName>\r\n            }\r\n            \r\n            { //중간에 바꾸고 싶으면 대괄호 쓰기(완료된 경우 수정 버튼 사용 불가)\r\n                !todoItem.done ? \r\n                    edited ? \r\n                    (<EditBtn type=\"button\" onClick={onClickSubmitButton} > 👌 </EditBtn>) :\r\n                    (<EditBtn type=\"button\" onClick={onClickEditButton}> ✏ </EditBtn>)\r\n                    : null\r\n            }\r\n            <DelBtn type=\"button\" onClick={onClickDelete}> 🗑 </DelBtn>\r\n        </ItemBox>\r\n    );\r\n}\r\n\r\nexport default ToDoItem;","import React from 'react';\r\nimport TodoItem from './ToDoItem';\r\nimport styled from 'styled-components';\r\n\r\nconst ListBox = styled.div`\r\nmargin-top: 30px;\r\ndisplay: flex;\r\nflex-direction: column;\r\n`;\r\nconst ListTitle = styled.p`\r\nfont-weight: bold;\r\nmargin: 0;\r\n}\r\n`\r\nconst List = styled.ul`\r\nlist-style: none;\r\ndisplay: flex;\r\nflex-direction: column; \r\njustify-content: center;\r\n padding: 0;\r\n`;\r\nconst ToDoItemList = ({title,todoList,setTodoList,checkedList}) => {\r\n    return(\r\n        <ListBox>\r\n            <ListTitle>{title}</ListTitle>\r\n            <List>\r\n               {todoList && //todoList가 있을때만 함\r\n                todoList.map((item)=>\r\n                { \r\n                    //받아온 checkList값에 따라 내용 출력\r\n                    if(checkedList !== item.done) return null;\r\n\r\n                    //삭제된 투두는 출력하지 않음\r\n                    if(item.deleted) return null;\r\n                    \r\n                    return (\r\n                        <TodoItem \r\n                            key={item.id}\r\n                            todoItem={item}\r\n                            todoList={todoList}\r\n                            setTodoList={setTodoList}\r\n                            checked={checkedList}\r\n                        />\r\n                    )\r\n                }\r\n                )}\r\n            </List>\r\n        </ListBox>\r\n    );\r\n}\r\n\r\nexport default ToDoItemList;","import React, {useState,useRef,useEffect} from 'react';\r\nimport styled from 'styled-components';\r\n\r\nexport const Count = ({todoList}) => {\r\n   return (\r\n    <div>남은 할일 / 전체 개수 : {todoList.filter( item => !item.done && !item.deleted ).length } / {todoList.filter( item => !item.deleted ).length}</div>\r\n   )\r\n}\r\n","import React , {useState} from 'react';\r\nimport {InputBox} from '../components/InputBox';\r\nimport TodoItemList from '../components/ToDoItemList';\r\nimport styled from 'styled-components';\r\nimport {Count} from '../components/Count';\r\n\r\nconst Homepage = styled.div`\r\n    min-width : 480px;\r\n    display: flex;\r\n    flex-direction: column;\r\n    justify-content: center;\r\n    margin: 0 auto;\r\n`;\r\n\r\nconst Home = () => {\r\n    const [todoList, setTodoList] = useState([]);\r\n\r\n    return (\r\n        <Homepage>\r\n            <Count todoList={todoList}/>\r\n            {/*투두 추가하는 인풋박스 */}\r\n            <InputBox todoList={todoList} setTodoList={setTodoList}/>\r\n             {/* 할일 목록 출력하는 리스트 \r\n             각각의 title,todoList는 props임*/}\r\n            <TodoItemList \r\n            title={'할 일'}\r\n            todoList={todoList}\r\n            setTodoList={setTodoList}\r\n            checkedList={false}/>\r\n            {/* 완료 목록 출력하는 리스트 */}\r\n            <TodoItemList \r\n            title={'완료한 일'}\r\n            todoList={todoList}\r\n            setTodoList={setTodoList}\r\n            checkedList={true}/>\r\n        </Homepage>\r\n    );\r\n}\r\n\r\nexport default Home;","import logo from './logo.svg';\r\nimport './App.css';\r\nimport Home from './pages/Home'\r\n\r\nfunction App() {\r\n  return (\r\n    <Home />\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}